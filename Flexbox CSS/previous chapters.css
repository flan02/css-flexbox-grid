/*
? Flexbox CSS
? aqui vamos a escribir el codigo del archivo flexbox.css de los capitulo anteriores para que no molesten si las clases se repiten en capitulos siguientes.
*/


 
/*////////////////////////////////////////////////////////////////////////////////////// CHAPTER 2 CONCEPTOS */


.container {
    background-color: #333;
    /*padding: 1rem;*/
    display: flex;  /*como BLOCK (cajas envidiosas) ocupa todo el ancho aunque los items que contiene no abarquen todo el width de la pantalla */
    /*display: inline-flex;*/ 
  }
  
  .item {
    background-color: lightseagreen;
  }
  
  .container-2 {
    background-color: #333;
    /* Con inline-flex podemos alinear varias cajas como si estuvieran en linea */
    display: inline-flex;  /* (como las etiquetas en linea) ocupa solo el ancho que necesita para abarcar los items que contenga */
  }
  

/* ///////////////////////////////////////////////////////////////////////////////////// CHAPTER 3 FLUJO DE FLEXBOX   */

  /*ordena en row o column y sus reversos para invertir los ordenes*/
/* 
! Si uso row-reverse || column-reverse, el orden y la ubicacion de los items se invierte. De izq a derecha pasa a ser de derecha a izq y del primer item al ultimo pasa a ser del ultimo al primero
? NO-WRAP (1 sola linea) es el comportamiento por defecto, si no se define nada, los items se acomodan en una sola fila, si no hay espacio suficiente se enciman y se genera un scroll horizontal
*/

.container {
    display: flex;
    flex-direction: column; /* column sobre eje y */
    flex-wrap: wrap; /* envoltura del padre, como se alinean los hijos genera un scroll horizontal, mantiene todos los hijos en una sola fila horizontal // WRAP respeta el % de los hijos y crea columnas con los items dentro de la misma fila */
    flex-flow: column nowrap; /* atajo (shortcut) flex-direction y flex-wrap */
    height: 30vh;
    background-color: #333;
  }
  
  .item {
    background-color: #666;
    border: thin solid pink;
    width: 20%;
    height: 20%;
  }
  

/*  ///////////////////////////////////////////////////////////////////////////////// CHAPTER 4  JUSTIFY-CONTENT */
/*
? justify content define la alineacion aplica respecto al espacio sobrante que quede en la caja padre 
? puede alinear sobre el principal sea eje X o el eje Y, segun el FLOW del padre

*/


.container {
    display: flex;
    flex-flow: row wrap;
    justify-content: space-evenly; /* space-evenly todas las orillas tienen un espacio proporcional al espacio interno*/
    height: 30vh;
    background-color: #666;
  }
  
  .item {
    border: medium solid #999;
    width: 20%;
    height: 20%;
    background-color: burlywood;
  }
  
  

  /*  //////////////////////////////////////////////////////////////////////////////////////////////// CHAPTER 5  ALIGN-ITEMS y ALIGN-CONTENT */
/*
trabajan sobre los ejes transversales,  si estamos en ROW : EJE X trabajara ALIGN sobre el EJE Y, para COLUMN trabajara sobre eje X
? ALIGN ITEMS:  ajusta items siempre que haya una sola linea. Se usa con NOWRAP. Valor por defecto STRETCH (estira los items para llenar el tamano del padre)
? ALIGN CONTENT: ajusta todos los items siempre y cuando los hijos formen mas de una sola linea. Trabaja en grupo de cajas. Se hay qe habilitar WRAP y WRAP-REVERSE si o si. 
*/


.container {
  display: flex;
  flex-flow: row wrap;
  justify-content: flex-start;  /*valor por defecto */
  align-items: baseline; /* stretch valor por defecto , los items se estiran para llenar el tamano del padre 
  siempre y cuando los items no tengan definida una altura*/
}

.item {
  border: 1px solid #999;
  background-color: #666;
  width: 20%;
  height: 20%;
}


.item:nth-child(2) {
  font-size: 250%;
}